from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Transaction, Category, SavingsGoal, Loan
from .forms import TransactionForm, SavingsGoalForm, LoanForm
from dateutil.relativedelta import relativedelta
from django.utils.timezone import now
from decimal import Decimal
from django.db.models import Sum, Q
from django.contrib.auth import login, authenticate
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from .forms import CustomUserCreationForm 
from datetime import datetime, timedelta
from django.db import models
from django.db.models import Sum
from budget.models import Category, Transaction, Loan, SavingsGoal
from django.utils import timezone
import random

def home(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return render(request, 'budget/home.html')

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return redirect('budget:transaction_list')
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{field}: {error}')
    else:
        form = CustomUserCreationForm()
    
    return render(request, 'registration/register.html', {'form': form})

@login_required
def create_demo_data(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    user = request.user
    
    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Transaction.objects.filter(user=user, description__contains='[–î–µ–º–æ]').delete()
        Loan.objects.filter(user=user, name__contains='[–î–µ–º–æ]').delete()
        SavingsGoal.objects.filter(user=user, name__contains='[–î–µ–º–æ]').delete()
        
        income_categories = [
            ('–ó–∞—Ä–ø–ª–∞—Ç–∞', 'income'),
            ('–§—Ä–∏–ª–∞–Ω—Å', 'income'),
            ('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'income'),
            ('–ü–æ–¥–∞—Ä–∫–∏', 'income'),
        ]
        
        expense_categories = [
            ('–ü—Ä–æ–¥—É–∫—Ç—ã', 'expense'),
            ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'expense'),
            ('–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', 'expense'),
            ('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'expense'),
            ('–û–¥–µ–∂–¥–∞', 'expense'),
            ('–ó–¥–æ—Ä–æ–≤—å–µ', 'expense'),
        ]
        
        categories_map = {}
        
        for name, cat_type in income_categories + expense_categories:
            category, created = Category.objects.get_or_create(
                name=name,
                type=cat_type,
                defaults={'user': user}
            )
            categories_map[name] = category
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥—ã)
        income_transactions = [
            (categories_map['–ó–∞—Ä–ø–ª–∞—Ç–∞'], 120000, '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –æ–∫—Ç—è–±—Ä—å'),
            (categories_map['–§—Ä–∏–ª–∞–Ω—Å'], 35000, '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞'),
            (categories_map['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'], 15000, '–î–∏–≤–∏–¥–µ–Ω–¥—ã –ø–æ –∞–∫—Ü–∏—è–º'),
        ]
        
        for category, amount, description in income_transactions:
            Transaction.objects.create(
                user=user,
                category=category,
                amount=amount,
                date=timezone.now().date() - timedelta(days=10),
                description=f'[–î–µ–º–æ] {description}'
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä–∞—Å—Ö–æ–¥—ã)
        expense_transactions = [
            (categories_map['–ü—Ä–æ–¥—É–∫—Ç—ã'], 25000, '–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é'),
            (categories_map['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'], 8000, '–ë–µ–Ω–∑–∏–Ω –∏ –ø—Ä–æ–µ–∑–¥–Ω–æ–π'),
            (categories_map['–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏'], 12000, '–ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞'),
            (categories_map['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'], 15000, '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∏–Ω–æ'),
            (categories_map['–û–¥–µ–∂–¥–∞'], 18000, '–ù–æ–≤–∞—è –∫—É—Ä—Ç–∫–∞'),
            (categories_map['–ó–¥–æ—Ä–æ–≤—å–µ'], 5000, '–í–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É'),
        ]
        
        for category, amount, description in expense_transactions:
            Transaction.objects.create(
                user=user,
                category=category,
                amount=amount,
                date=timezone.now().date() - timedelta(days=random.randint(1, 30)),
                description=f'[–î–µ–º–æ] {description}'
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫—Ä–µ–¥–∏—Ç—ã
        demo_loans = [
            {
                'name': '[–î–µ–º–æ] –ò–ø–æ—Ç–µ–∫–∞',
                'loan_type': 'mortgage',
                'total_amount': 3500000,
                'remaining_amount': 3200000,
                'monthly_payment': 45000,
                'interest_rate': 7.5,
                'start_date': timezone.now().date() - timedelta(days=400),
                'end_date': timezone.now().date() + timedelta(days=3000)
            },
            {
                'name': '[–î–µ–º–æ] –ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç', 
                'loan_type': 'consumer',
                'total_amount': 900000,
                'remaining_amount': 420000,
                'monthly_payment': 28000,
                'interest_rate': 11.9,
                'start_date': timezone.now().date() - timedelta(days=200),
                'end_date': timezone.now().date() + timedelta(days=600)
            },
            {
                'name': '[–î–µ–º–æ] –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç',
                'loan_type': 'consumer', 
                'total_amount': 300000,
                'remaining_amount': 120000,
                'monthly_payment': 15000,
                'interest_rate': 15.2,
                'start_date': timezone.now().date() - timedelta(days=100),
                'end_date': timezone.now().date() + timedelta(days=200)
            }
        ]
        
        created_loans = []
        for loan_data in demo_loans:
            loan = Loan.objects.create(user=user, **loan_data)
            created_loans.append(loan)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Ü–µ–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        SavingsGoal.objects.create(
            user=user,
            name='[–î–µ–º–æ] –û—Ç–ø—É—Å–∫ –≤ –¢—É—Ä—Ü–∏–∏',
            target_amount=150000,
            current_amount=75000,
            deadline=timezone.now().date() + timedelta(days=180),
            priority=8
        )
        
        SavingsGoal.objects.create(
            user=user,
            name='[–î–µ–º–æ] –ù–æ–≤—ã–π –Ω–æ—É—Ç–±—É–∫',
            target_amount=80000,
            current_amount=45000,
            deadline=timezone.now().date() + timedelta(days=90),
            priority=6
        )
        
        SavingsGoal.objects.create(
            user=user,
            name='[–î–µ–º–æ] –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥',
            target_amount=300000,
            current_amount=120000,
            deadline=timezone.now().date() + timedelta(days=365),
            priority=10
        )
        
        # –°–û–ó–î–ê–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –ö–†–ï–î–ò–¢–ê–ú –î–õ–Ø –ì–†–ê–§–ò–ö–ê
        credit_category, _ = Category.objects.get_or_create(
            name='–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
            type='expense',
            defaults={'user': user, 'is_credit_related': True}
        )
        
        for loan in created_loans:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–ò–• –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–µ–¥–∏—Ç—É
            for i in range(3):
                Transaction.objects.create(
                    user=user,
                    category=credit_category,
                    amount=loan.monthly_payment,
                    date=timezone.now().date() - timedelta(days=30 * (i + 1)),
                    description=f'[–î–µ–º–æ] –ü–ª–∞—Ç–µ–∂ –ø–æ {loan.name}',
                    loan=loan
                )
        
        messages.success(request, 'üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.')
        
    except Exception as e:
        messages.error(request, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {str(e)}')
    
    return redirect('budget:transaction_list')

@login_required
def clear_demo_data(request):
    """
    –û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    user = request.user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –î–û —É–¥–∞–ª–µ–Ω–∏—è
        transactions_count = Transaction.objects.filter(
            user=user, 
            description__contains='[–î–µ–º–æ]'
        ).count()
        
        loans_count = Loan.objects.filter(
            user=user,
            name__contains='[–î–µ–º–æ]'
        ).count()
        
        goals_count = SavingsGoal.objects.filter(
            user=user,
            name__contains='[–î–µ–º–æ]'
        ).count()
        
        # –£–¥–∞–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        Transaction.objects.filter(
            user=user, 
            description__contains='[–î–µ–º–æ]'
        ).delete()
        
        Loan.objects.filter(
            user=user,
            name__contains='[–î–µ–º–æ]'
        ).delete()
        
        SavingsGoal.objects.filter(
            user=user,
            name__contains='[–î–µ–º–æ]'
        ).delete()
        
        messages.info(request, f'‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: {transactions_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {loans_count} –∫—Ä–µ–¥–∏—Ç–æ–≤, {goals_count} —Ü–µ–ª–µ–π')
        
    except Exception as e:
        messages.error(request, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}')
    
    return redirect('budget:transaction_list')

def user_has_demo_data(user):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"""
    return (
        Transaction.objects.filter(user=user, description__contains='[–î–µ–º–æ]').exists() or
        Loan.objects.filter(user=user, name__contains='[–î–µ–º–æ]').exists() or
        SavingsGoal.objects.filter(user=user, name__contains='[–î–µ–º–æ]').exists()
    )

@login_required
def transaction_list(request):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    thirty_days_ago = timezone.now().date() - timedelta(days=30)
    
    # –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    all_transactions = Transaction.objects.filter(user=request.user).select_related('category', 'loan').order_by('-date')
    
    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    recent_transactions = all_transactions.filter(date__gte=thirty_days_ago)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
    income_agg = recent_transactions.filter(category__type='income').aggregate(total=Sum('amount'))
    expense_agg = recent_transactions.filter(category__type='expense').aggregate(total=Sum('amount'))
    
    total_income = income_agg['total'] or Decimal('0')
    total_expense = expense_agg['total'] or Decimal('0')
    balance = total_income - total_expense

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
    total_income = total_income.quantize(Decimal('0.01'))
    total_expense = total_expense.quantize(Decimal('0.01'))
    balance = balance.quantize(Decimal('0.01'))

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã (–¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã)
    main_chart_data = None
    if total_income > 0 or total_expense > 0:
        main_chart_data = {
            'labels': ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã'],
            'values': [float(total_income), float(total_expense)],
            'colors': ['#28a745', '#dc3545']
        }

    # –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ 30 –¥–Ω–µ–π
    expense_categories_data = None
    expense_by_category = recent_transactions.filter(
        category__type='expense'
    ).values('category__name').annotate(total=Sum('amount')).order_by('-total')
    
    if expense_by_category:
        expense_categories_data = {
            'labels': [item['category__name'] for item in expense_by_category],
            'values': [float(item['total']) for item in expense_by_category],
            'colors': ['#dc3545', '#e74c3c', '#c0392b', '#ff6b6b', '#ee5a24']
        }

    # –î–ò–ê–ì–†–ê–ú–ú–ê –ö–†–ï–î–ò–¢–ù–´–• –ü–õ–ê–¢–ï–ñ–ï–ô
    credit_payments_data = None
    user_loans = Loan.objects.filter(user=request.user)
    
    if user_loans.exists():

        loan_names = []
        monthly_payments = []
        colors = ['#8e44ad', '#9b59b6', '#3498db', '#2980b9', '#1abc9c']
        
        for i, loan in enumerate(user_loans):
            loan_names.append(loan.name.replace('[–î–µ–º–æ] ', ''))
            monthly_payments.append(float(loan.monthly_payment))
        
        credit_payments_data = {
            'labels': loan_names,
            'values': monthly_payments,
            'colors': colors[:len(loan_names)]
        }
        
    # –î–∏–∞–≥—Ä–∞–º–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
    savings_chart_data = None
    savings_goals = SavingsGoal.objects.filter(user=request.user)
    if savings_goals.exists():
        savings_chart_data = {
            'labels': [goal.name for goal in savings_goals],
            'current_values': [float(goal.current_amount) for goal in savings_goals],
            'target_values': [float(goal.target_amount) for goal in savings_goals],
            'progress': [float(goal.progress_percentage) for goal in savings_goals],
            'colors': ['#27ae60', '#2ecc71', '#1abc9c', '#16a085']
        }

    # –î–∏–∞–≥—Ä–∞–º–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    loans_chart_data = None
    loans = Loan.objects.filter(user=request.user)
    if loans.exists():
        loans_chart_data = {
            'labels': [loan.name for loan in loans],
            'paid_values': [float(loan.paid_amount) for loan in loans],
            'remaining_values': [float(loan.remaining_amount) for loan in loans],
            'progress': [float(loan.progress_percentage) for loan in loans],
            'colors': ['#e74c3c', '#c0392b', '#d35400', '#e67e22']
        }

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_savings_goal = sum(goal.target_amount for goal in savings_goals) or Decimal('0')
    total_current_savings = sum(goal.current_amount for goal in savings_goals) or Decimal('0')
    
    total_debt = sum(loan.remaining_amount for loan in loans) or Decimal('0')
    total_monthly_payments = sum(loan.monthly_payment for loan in loans) or Decimal('0')
    
    # –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–µ–Ω—å–≥–∏
    free_money_after_expenses = balance - total_monthly_payments
    free_money_after_savings = free_money_after_expenses
    
    if total_savings_goal > 0 and total_savings_goal > total_current_savings:
        monthly_savings_need = (total_savings_goal - total_current_savings) / Decimal('12')
        free_money_after_savings = free_money_after_expenses - monthly_savings_need
    
    free_money_after_savings = max(free_money_after_savings, Decimal('0'))
    free_money_after_expenses = max(free_money_after_expenses, Decimal('0'))

    context = {
        'transactions': all_transactions,
        'total_income': total_income,
        'total_expense': total_expense,
        'balance': balance,
        'main_chart_data': main_chart_data,
        'expense_categories_data': expense_categories_data,
        'credit_payments_data': credit_payments_data,
        'savings_chart_data': savings_chart_data,
        'loans_chart_data': loans_chart_data,
        'savings_goals': savings_goals,
        'loans': loans,
        'total_savings_goal': total_savings_goal,
        'total_current_savings': total_current_savings,
        'total_debt': total_debt,
        'total_monthly_payments': total_monthly_payments,
        'free_money_after_expenses': free_money_after_expenses,
        'free_money_after_savings': free_money_after_savings,
        'period_days': 30,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —à–∞–±–ª–æ–Ω–µ
        'user_demo_data_exists': user_has_demo_data(request.user),
    }
    return render(request, 'budget/transaction_list.html', context)

@login_required
def add_transaction(request):
    if request.method == 'POST':
        form = TransactionForm(request.POST)
        if form.is_valid():
            new_transaction = form.save(commit=False)
            new_transaction.user = request.user
            new_transaction.save()
            return redirect('budget:transaction_list')
    else:
        form = TransactionForm()

    context = {'form': form}
    return render(request, 'budget/transaction_form.html', context)

@login_required
def savings_goals(request):
    goals = SavingsGoal.objects.filter(user=request.user)
    total_savings_goal = goals.aggregate(total=Sum('target_amount'))['total'] or 0
    total_current_savings = goals.aggregate(total=Sum('current_amount'))['total'] or 0
    
    remaining_amount = total_savings_goal - total_current_savings
    
    context = {
        'goals': goals,
        'total_savings_goal': total_savings_goal,
        'total_current_savings': total_current_savings,
        'remaining_amount': remaining_amount,
    }
    return render(request, 'budget/savings_goals.html', context)

def calculate_free_money_after_expenses(user):
    try:
        # –°—É–º–º–∞ –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤
        total_income = Transaction.objects.filter(
            user=user, 
            category__type='income'
        ).aggregate(Sum('amount'))['amount__sum'] or 0
        
        # –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö)
        total_expenses = Transaction.objects.filter(
            user=user, 
            category__type='expense'
        ).exclude(
            # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
            category__name__icontains='–∫—Ä–µ–¥–∏—Ç'
        ).exclude(
            category__name__icontains='–∑–∞–π–º'
        ).exclude(
            category__name__icontains='loan'
        ).aggregate(Sum('amount'))['amount__sum'] or 0
        
        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∏–∑ –º–æ–¥–µ–ª–∏ Loan
        total_loan_payments = Loan.objects.filter(
            user=user
        ).aggregate(Sum('monthly_payment'))['monthly_payment__sum'] or 0
        
        # –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ = –¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã - –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        free_money = total_income - total_expenses - total_loan_payments
        return max(free_money, 0)  # –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        return 0
    
@login_required
def loans_list(request):
    loans = Loan.objects.filter(user=request.user)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_debt = sum(loan.remaining_amount for loan in loans)
    total_monthly_payments = sum(loan.monthly_payment for loan in loans)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    free_money_after_expenses = calculate_free_money_after_expenses(request.user)
    
    context = {
        'loans': loans,
        'total_debt': total_debt,
        'total_monthly_payments': total_monthly_payments,
        'free_money_after_expenses': free_money_after_expenses,
    }
    return render(request, 'budget/loans.html', context)

@login_required
def add_savings_goal(request):
    if request.method == 'POST':
        form = SavingsGoalForm(request.POST)
        if form.is_valid():
            new_goal = form.save(commit=False)
            new_goal.user = request.user
            new_goal.save()
            return redirect('budget:savings_goals')
    else:
        form = SavingsGoalForm()

    context = {'form': form}
    return render(request, 'budget/savings_goal_form.html', context)

@login_required
def add_loan(request):
    if request.method == 'POST':
        form = LoanForm(request.POST)
        if form.is_valid():
            new_loan = form.save(commit=False)
            new_loan.user = request.user
            new_loan.save()
            return redirect('budget:loans_list')
    else:
        form = LoanForm()

    context = {'form': form}
    return render(request, 'budget/loan_form.html', context)

@login_required
def edit_transaction(request, pk):
    transaction = get_object_or_404(Transaction, id=pk, user=request.user)
    
    if request.method == 'POST':
        form = TransactionForm(request.POST, instance=transaction)
        if form.is_valid():
            form.save()
            return redirect('budget:transaction_list')
    else:
        form = TransactionForm(instance=transaction)
    
    context = {'form': form, 'transaction': transaction}
    return render(request, 'budget/transaction_form.html', context)

@login_required
def delete_transaction(request, pk):
    transaction = get_object_or_404(Transaction, id=pk, user=request.user)
    
    if request.method == 'POST':
        transaction.delete()
        return redirect('budget:transaction_list')
    else:
        return render(request, 'budget/transaction_confirm_delete.html', {'transaction': transaction})

@login_required
def edit_savings_goal(request, pk):
    goal = get_object_or_404(SavingsGoal, id=pk, user=request.user)
    
    if request.method == 'POST':
        form = SavingsGoalForm(request.POST, instance=goal)
        if form.is_valid():
            form.save()
            return redirect('budget:savings_goals')
    else:
        form = SavingsGoalForm(instance=goal)
    
    context = {'form': form, 'goal': goal}
    return render(request, 'budget/savings_goal_form.html', context)

@login_required
def delete_savings_goal(request, pk):
    goal = get_object_or_404(SavingsGoal, id=pk, user=request.user)
    
    if request.method == 'POST':
        goal.delete()
        return redirect('budget:savings_goals')
    else:
        return render(request, 'budget/savings_goal_confirm_delete.html', {'goal': goal})

@login_required
def edit_loan(request, pk):
    loan = get_object_or_404(Loan, id=pk, user=request.user)
    
    if request.method == 'POST':
        form = LoanForm(request.POST, instance=loan)
        if form.is_valid():
            form.save()
            return redirect('budget:loans_list')
    else:
        form = LoanForm(instance=loan)
    
    context = {'form': form, 'loan': loan}
    return render(request, 'budget/loan_form.html', context)

@login_required
def delete_loan(request, pk):
    loan = get_object_or_404(Loan, id=pk, user=request.user)
    
    if request.method == 'POST':
        loan.delete()
        return redirect('budget:loans_list')
    else:
        return render(request, 'budget/loan_confirm_delete.html', {'loan': loan})
    
@login_required
def add_balance(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    if request.method == 'POST':
        amount = request.POST.get('amount')
        description = request.POST.get('description', '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å')
        
        if amount:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                balance_category, created = Category.objects.get_or_create(
                    name='–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
                    user=request.user,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    defaults={
                        'type': 'income',
                        'is_credit_related': False
                    }
                )
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞
                balance_transaction = Transaction.objects.create(
                    user=request.user,
                    amount=amount,
                    category=balance_category,
                    date=timezone.now().date(),
                    description=description
                )
                
                messages.success(request, f'–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å {amount} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
                return redirect('budget:transaction_list')
                
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}')
        else:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞')
    
    return render(request, 'budget/balance_form.html')